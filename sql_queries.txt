--------------------Task 1----------------------

CREATE SCHEMA IF NOT EXISTS LibraryManagement;

USE LibraryManagement;

CREATE TABLE IF NOT EXISTS authors (
	author_id INT AUTO_INCREMENT PRIMARY KEY,
    author_name VARCHAR(30)
);
CREATE TABLE IF NOT EXISTS genres (
	genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(20)
);
CREATE TABLE IF NOT EXISTS books (
	book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    publication_year YEAR,
    author_id INT,
    genre_id INT,
    FOREIGN KEY (author_id) REFERENCES authors(author_id),
    FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);
CREATE TABLE IF NOT EXISTS users (
	user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(30) NOT NULL,
    email VARCHAR(50)
);
CREATE TABLE IF NOT EXISTS borrowed_books (
	borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    user_id INT NOT NULL,
    borrow_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)

--------------------Task 2----------------------

INSERT INTO authors (author_name) VALUES ('James Clear');
INSERT INTO authors (author_name) VALUES ('Alieka Volskykh');

INSERT INTO genres (genre_name) VALUES ('Self-help');
INSERT INTO genres (genre_name) VALUES ('Teenage fantasy');

INSERT INTO users (username, email) VALUES ('Sara James', 'sara.james15@gmail.com');
INSERT INTO users (username, email) VALUES ('Lina Khimko', 'likhi769@gmail.com');

INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Atomic Habits', 2018, 1, 1);
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Mila Rudyk', 2011, 2, 2);

INSERT INTO borrowed_books (book_id, user_id, borrow_date) VALUES (1, 1, CURDATE());
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (2, 2, '2023-07-03', '2023-08-25');


--------------------Task 3----------------------

USE mydb;


SELECT * FROM order_details
INNER JOIN orders_ ON order_details.order_id = orders_.id
INNER JOIN products_ ON order_details.product_id = products_.id
INNER JOIN suppliers ON products_.supplier_id = suppliers.id
INNER JOIN categories ON products_.category_id = categories.id
INNER JOIN customers ON orders_.customer_id = customers.id
INNER JOIN employees ON orders_.employee_id = employees.employee_id
INNER JOIN shippers ON orders_.shipper_id = shippers.id


--------------------Task 4----------------------

До скріншоту р4_2_LEFT_RIGHT_JOIN
Кількість рядків у результаті зміни INNER JOIN на LEFT RIGHT JOIN не змінилася.
Це означає, що дочірні таблиці з FOREIGN KEYs містять ключі до усіх рядків батьківських таблиць.
Тобто у батьківських таблицях немає даних, які не були використані у інших (дочірніх) таблицях.


SQL query

USE mydb;

SELECT categories.name AS 'Name', COUNT(*) AS 'Amount', AVG(order_details.quantity) AS 'Avg quantity' FROM order_details
INNER JOIN orders_ ON order_details.order_id = orders_.id
INNER JOIN products_ ON order_details.product_id = products_.id
INNER JOIN suppliers ON products_.supplier_id = suppliers.id
INNER JOIN categories ON products_.category_id = categories.id
INNER JOIN customers ON orders_.customer_id = customers.id
INNER JOIN employees ON orders_.employee_id = employees.employee_id
INNER JOIN shippers ON orders_.shipper_id = shippers.id
WHERE orders_.employee_id BETWEEN 4 AND 10
GROUP BY categories.name
HAVING AVG(order_details.quantity) > 21
ORDER BY COUNT(*) DESC
LIMIT 4 OFFSET 1
